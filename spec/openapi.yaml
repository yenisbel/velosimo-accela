openapi: 3.0.0
info:
  version: v1
  title: Velosimo Accela API
  termsOfService: ''
  contact:
    email: 
    url: ''
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 
  description: |
    # Introduction

    The Velosimo Accela API 
    

tags:
  - name: Available Integrations
    description: |
      This .

      ### Available Integrations:

      - **Accela**: It is the main collection and the basis for working at OMNA Commerce LTD.
      - **Accela-Laserfiche**: It includes support for the integration of Velosimo with Lazada's marketplaces.

  - name: Webhooks
    description: |
      A webhook is a hook through which a notification is sent to a URL of the user's choice when a certain event occurs.
      They allow to receive real-time HTTP notifications of changes to specific objects. Webhooks facilitate syncing
      and relaying data between two endpoints.

      ### Anatomy of a webhook

      After you configure a webhook subscription, the events that you specified will trigger a webhook notification
      each time they occur. This notification contains a JSON payload and and HTTP headers that provide context.
      For example, the order/updated webhook includes the following headers:

      - **X-Tenant-Token**: 5cfe690b25d9854b3b02241b,
      - **X-Topic**: order/updated,
      - **X-API-Version**: v1
      - **X-HMac-Sha256**: d24c9128362b0518f9ca2bf767b4a60a59aefe0f63ebeb7d47ec594442fc7a8f

      Some HTTP headers are particularly useful for your app:

      - **X-Topic** represents the type of object and the event that occurred.
      - **X-HMac-Sha256** and **X-Tenant-Token** are used to verify webhooks.
      - **X-API-Version** is used to confirm what version of the API used to serialize the webhook event payload.

      ### Verifying webhooks

      Webhooks created through the API are verified by calculating a digital signature. Each webhook request includes
      **X-HMac-Sha256** header, which is generated using the tenant shared secret along with the data sent in the request.

      To verify that the request came from OMNA, compute the **HMAC** digest according to the following algorithm and
      compare it to the value in the **X-HMac-Sha256** header. If they match, then you can be sure that the webhook was
      sent from OMNA.

      **The following Ruby example apply to Sinatra or RoR web frameworks to verify a webhook request:**

      ```Ruby
        require 'openssl'

        request.body.rewind
        body = request.body.read

        secret = '...' # Get this from tenant with equal to **X-Tenant-Token** header.

        hmac1 = request.headers['X-HMac-Sha256']
        hmac2 = OpenSSL::HMAC.hexdigest('sha256', secret, body)

        raise 'The request is not valid...' if hmac1 != hmac2
      ```

servers:
  - url: 'https://cenit.io/app/ecapi-v1'

security:
  - Token: []
    Timestamp: []
    HMac: []

x-tagGroups:
  - name: Integrations
    tags:
      - Available Integrations

  - name: Workflows
    tags:
      - Flows
      - Webhooks

  - name: Algorithms
    tags:
      - Definition

  - name: Security
    tags:
      - Tenants

externalDocs:
  description: 
  url: 